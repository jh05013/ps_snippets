var searchIndex = JSON.parse('{\
"ps_snippets":{"doc":"This is a collection of Rust algorithm snippets maintained …","t":"AAAAAAAAAAAAAACADLLLLLLLLLLLLLLLLCADLLLLLLLLLLLLLLLLLLLCADLLLLLLLLLLLLLLLLLLLLLLCCASSQIDQLLLLLLLLLLKKLLLLLKLACCAIDLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLKLLLLMMAAACCADDMLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLCADDDMLLLLLLLLLLLLLLLLLLLLLLLLLMLMMMLLLLLLLLLLLLLCADDLLLLMLLLLLMLLMLLLLMLLMLMLLLLLLLLLACADLLLLLLLLLLLLLLLLLLLLLLAAACADLLLLLLLLLLLLLLCADLLFLLLLLLLCCAIIKKAAAACANEINNLLLLLLLCAIDLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLACADLLLLLLLLLLLLFACCCAFFF","n":["ds","geometry","graph","io","math","matrix","prime","rand","slow","string","merge_sort_tree","queue_min","range_sum","segtree_lazy","MergeSortTree","merge_sort_tree_mod","MergeSortTree","borrow","borrow_mut","clone","clone_into","count","default","fmt","from","index","into","len","new","to_owned","try_from","try_into","type_id","QueueMin","queue_min_mod","QueueMin","borrow","borrow_mut","clone","clone_into","default","fmt","from","get","into","is_empty","len","most_recent","new","pop","push","to_owned","try_from","try_into","type_id","RangeSum","range_sum_mod","RangeSum","borrow","borrow_mut","clone","clone_into","default","eq","equivalent","fmt","from","from_vec","into","is_empty","len","new","push","resize","sum","to_owned","try_from","try_into","type_id","whole","LazyMonoid","SegtreeLazy","segtree_lazy_mod","ID","LAZY_ID","Lazy","LazyMonoid","SegtreeLazy","V","borrow","borrow_mut","clone","clone_into","default","fmt","from","from_slice","into","new","op","op_lazy","query","to_owned","try_from","try_into","type_id","unlazy","update","pnt","Pnt","pnt","pnt_mod","Coord","Pnt","abs","add","add_assign","arg","arg_at","borrow","borrow_mut","clone","clone_into","cmp","cross","default","dist","distsq","div","div_assign","dot","eq","equivalent","flip_at","fmt","from","into","mul","mul_assign","neg","orient","partial_cmp","pnt","rot","rot90","rot90_at","rot_at","scale","scale_to","sq","sub","sub_assign","to_f64","to_owned","try_from","try_into","type_id","x","y","degree_ordered_graph","dinic","mcmf","DegreeOrderedGraph","DogConstructor","degree_ordered","DegreeOrderedGraph","DogConstructor","adj","adj_before","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","connect","default","degree","edge_cnt","fmt","fmt","from","from","init","into","into","is_before","is_empty","len","new","quads_per_vertex","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Dinic","dinic_mod","Dinic","Edge","EdgeIndex","adj","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","connect","fmt","fmt","fmt","from","from","from","index","into","into","into","max_flow","min_cut","n","new","orig","src","targ","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","used","Mcmf","mcmf_mod","Edge","Mcmf","borrow","borrow","borrow_mut","borrow_mut","cap","clone","clone","clone_into","clone_into","connect","cost","default","default","dst","fmt","fmt","from","from","g","into","into","n","new","opp","solve","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","oj_default","OJ","oj_default_mod","OJ","borrow","borrow_mut","debug","f64","from","i32","i64","into","ln","new","quit","read","read_vec","sp","string","try_from","try_into","try_read","type_id","u32","u64","write","barrett","div_floors","gcd","Barrett","barrett_mod","Barrett","borrow","borrow_mut","clone","clone_into","fmt","from","into","modpow","new","reduce","to_owned","try_from","try_into","type_id","div_floors","div_floors_mod","DivFloors","borrow","borrow_mut","div_floors","from","into","into_iter","next","try_from","try_into","type_id","Gcd","Lcm","gcd_mod","Gcd","Lcm","gcd","lcm","char_poly","gauss_elim","square_matrix","char_poly_mod","ElementaryOp","gauss_elim_mod","Add","ElementaryOp","Field","Mul","Swap","borrow","borrow_mut","from","into","try_from","try_into","type_id","SquareMatrix","square_matrix_mod","Semiring","SquareMatrix","add","add_assign","apply_row_op","apply_similar","borrow","borrow_mut","clone","clone_into","default","elements","elements_mut","eq","equivalent","eye","fmt","fmt","from","from_line","hessenberg_char_poly","index","index_mut","into","into_elements","make_hessenberg","make_ref","mat","mul","mul_assign","n","neg","new","pow","sub","sub_assign","to_owned","to_string","try_from","try_into","type_id","rand","Rng","rand_mod","Rng","borrow","borrow_mut","from","into","new","next_u32","next_u64","seeded","shuffle","try_from","try_into","type_id","divisors","suffix_array","binsearch_in_sa","sa_lcp","suffix_array","suffix_array_mod","binsearch_in_sa","sa_lcp","suffix_array"],"q":[[0,"ps_snippets"],[10,"ps_snippets::ds"],[14,"ps_snippets::ds::merge_sort_tree"],[16,"ps_snippets::ds::merge_sort_tree::merge_sort_tree_mod"],[33,"ps_snippets::ds::queue_min"],[35,"ps_snippets::ds::queue_min::queue_min_mod"],[55,"ps_snippets::ds::range_sum"],[57,"ps_snippets::ds::range_sum::range_sum_mod"],[80,"ps_snippets::ds::segtree_lazy"],[83,"ps_snippets::ds::segtree_lazy::segtree_lazy_mod"],[108,"ps_snippets::geometry"],[109,"ps_snippets::geometry::pnt"],[112,"ps_snippets::geometry::pnt::pnt_mod"],[159,"ps_snippets::graph"],[162,"ps_snippets::graph::degree_ordered_graph"],[165,"ps_snippets::graph::degree_ordered_graph::degree_ordered"],[201,"ps_snippets::graph::dinic"],[203,"ps_snippets::graph::dinic::dinic_mod"],[250,"ps_snippets::graph::mcmf"],[252,"ps_snippets::graph::mcmf::mcmf_mod"],[287,"ps_snippets::io"],[288,"ps_snippets::io::oj_default"],[290,"ps_snippets::io::oj_default::oj_default_mod"],[313,"ps_snippets::math"],[316,"ps_snippets::math::barrett"],[318,"ps_snippets::math::barrett::barrett_mod"],[333,"ps_snippets::math::div_floors"],[335,"ps_snippets::math::div_floors::div_floors_mod"],[346,"ps_snippets::math::gcd"],[349,"ps_snippets::math::gcd::gcd_mod"],[353,"ps_snippets::matrix"],[356,"ps_snippets::matrix::char_poly"],[357,"ps_snippets::matrix::gauss_elim"],[359,"ps_snippets::matrix::gauss_elim::gauss_elim_mod"],[371,"ps_snippets::matrix::square_matrix"],[373,"ps_snippets::matrix::square_matrix::square_matrix_mod"],[414,"ps_snippets::rand"],[415,"ps_snippets::rand::rand"],[417,"ps_snippets::rand::rand::rand_mod"],[430,"ps_snippets::slow"],[431,"ps_snippets::string"],[432,"ps_snippets::string::suffix_array"],[436,"ps_snippets::string::suffix_array::suffix_array_mod"],[439,"core::clone"],[440,"core::cmp"],[441,"core::fmt"],[442,"core::default"],[443,"core::fmt"],[444,"core::result"],[445,"core::any"],[446,"core::option"],[447,"core::cmp"],[448,"core::ops::arith"],[449,"core::str::traits"],[450,"alloc::string"],[451,"core::ops::arith"],[452,"core::ops::arith"]],"d":["Data structures.","Geometry.","","Easier IO interface specifically designed for online …","Math.","Matrix utilities.","A collection of prime-related functions and prime sieves.","Randomization.","Slow utilities for test-solving.","Strings.","A merge-sort tree.","A minimum-in-queue data structure, commonly called deque …","A static range sum data structure.","A lazy segment tree.","","","The merge-sort tree.","","","","","Returns the number of elements in <code>vals[l..=r]</code> whose value …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns the size of <code>vals</code>.","Constructs a new merge-sort tree out of <code>vals</code>.","","","","","","","A queue supporting minimum-in-queue.","","","","","","","Returns the argument unchanged.","Returns the minimum value in the queue, if any; otherwise …","Calls <code>U::from(self)</code>.","Returns <code>true</code> iff empty.","Returns the number of elements.","Returns the most recent value inserted into the queue.","Initializes an empty queue.","Pops from the queue and returns <code>true</code> if the queue is not …","Pushes <code>v</code> into the queue.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Constructs a new range sum DS out of <code>vals</code>.","Calls <code>U::from(self)</code>.","Returns whether <code>vals</code> is empty.","Returns the length of <code>vals</code>.","Constructs an empty range sum DS.","Pushes <code>v</code> at the end of <code>vals</code>.","Truncates or extends (with 0) <code>vals</code> to length <code>n</code>.","Returns <code>vals[i] + ... + vals[j]</code>.","","","","","Returns the sum of all <code>vals[i]</code>, or 0 if empty.","","","","Identity of the value operation.","Identity of the lazy operation.","","<code>T</code> must implement this trait for <code>SegtreeLazy</code>.","The lazy segment tree.","","","","","","","","Returns the argument unchanged.","Constructs a new lazy segment tree out of <code>vals</code>.","Calls <code>U::from(self)</code>.","Constructs a new lazy segment tree of length <code>n</code>.","The value operation.","The lazy operation.","Returns the result of the value operation over the indices …","","","","","Applies the lazy into the value.","Applies the lazy operation of <code>lz</code> to the indices <code>l..=r</code>.","A 2D point primitive.","","","","","A 2D point.","Distance from (0, 0).","","","Angle measured from +x axis, ccw.","Angle measured from +x direction, centered at <code>c</code>, ccw.","","","","","","Cross product with <code>b</code>.","","Distance from <code>b</code>.","Squared distance from <code>b</code>.","","","Dot product with <code>b</code>.","","","Mirror-reflected, centered at <code>c</code>.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Cross product of <code>self-&gt;b</code> and <code>b-&gt;c</code>.","","","Rotated <code>theta</code> radians ccw, centered at (0, 0).","Rotated 90 degrees ccw, centered at (0, 0).","Rotated 90 degrees ccw, centered at <code>c</code>.","Rotated <code>theta</code> radians ccw, centered at <code>c</code>.","Resized <code>f</code> times, centered at <code>c</code>.","Resized to size <code>size</code>, centered at <code>c</code>.","Squared distance from (0, 0).","","","","","","","","","","A graph DS for properties of sum(min(d(u), d(v))) over …","Maximum flow using Dinic’s algorithm.","Minimum cost maximum flow.","","","","The DOG interface. To construct it, see <code>DogConstructor</code>.","A constructor for <code>DegreeOrderedGraph</code>.","","Iterates over the neighbors of vertex <code>v</code> that are ordered …","","","","","","","","","Connects vertices <code>a</code> and <code>b</code>.","","Returns the degree of vertex <code>v</code>.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Turns the DOG constructor into <code>DegreeOrderedGraph</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true iff vertex <code>a</code> is ordered <code>b</code> in the graph, …","Returns true iff empty.","Returns the number of vertices.","Returns a new DOG constructor of <code>n</code> vertices.","Returns the number of quadrilaterals that pass through …","","","","","","","","","","","","","","","","","","","","","","","","","","","Connects from <code>s</code> to <code>e</code> with capacity <code>cap</code>, and returns the …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Sends and returns the maximum flow from <code>src</code> to <code>sink</code>.","Sends and returns the minimum cut between <code>src</code> and <code>sink</code>, …","","Initializes a graph with <code>n</code> vertices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","IO wrapper that reads the whole input, ignoring all …","","","","","","Writes <code>v</code> in debug form.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Writes <code>&#39;\\\\n&#39;</code>.","Constructs a new OJ IO interface.","Writes <code>v</code> and exits.","Reads a type <code>T</code>, panicking on failure. <code>i32</code>, <code>i64</code>, <code>u32</code>, <code>u64</code>, …","Reads <code>n</code> values of type <code>T</code> into a <code>Vec</code>, panicking on failure.","Writes <code>&#39; &#39;</code>.","","","","Tries to read a type <code>T</code>.","","","","Writes <code>v</code>.","Barrett reduction, allowing for a fast runtime constant …","Iterator for floor divisions of <code>n</code>.","Greatest common divisor and least common multiple.","","A Barrett reduction interface.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns $x^k$ mod <code>n</code>.","Creates a new Barrett reduction interface modulo <code>n</code>.","Returns <code>x</code> mod <code>n</code>.","","","","","","","See <code>div_floors</code>.","","","Returns an iterator of the values of <code>n/x</code> for a given <code>n</code>.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Greatest common divisor.","Least common multiple.","<code>a.gcd(b)</code> is the greatest common divisor of <code>a</code> and <code>b</code>. If …","<code>a.lcm(b)</code> is the least common multiple of <code>a</code> and <code>b</code>. If …","TODO","Gaussian elimination.","Square matrices.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","A square matrix.","","","","","","","","","","Iterates over its elements.","Iterates mutably over its elements.","","","Creates an identity <code>n * n</code> matrix.","","","Returns the argument unchanged.","Cretaes a matrix out of <code>n * n</code> values.","","","","Calls <code>U::from(self)</code>.","Iterates over its owned elements.","","","","","","Returns <code>n</code>.","","Creates an empty <code>n * n</code> matrix.","Returns its <code>k</code>-th power.","","","","","","","","A simple PRNG.","","","A random number generator.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Initializes a new generator.","Generates an integer in <code>[0, n: u32)</code>.","Generates an integer in <code>[0, n: u64)</code>.","","Shuffles the slice.","","","","Returns the list of divisors of <code>n</code>, not sorted. …","Suffix array.","","","","","If <code>needle</code> is a subslice of <code>s</code>, returns <code>Some(l, r)</code> where …","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,22,22,22,0,0,22,21,21,21,21,21,21,21,21,21,21,22,22,21,21,21,21,21,22,21,0,0,0,0,0,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,24,24,24,24,24,24,24,24,24,26,24,24,24,24,24,24,0,0,0,0,0,0,0,0,29,29,31,29,31,29,31,29,31,29,31,31,29,29,31,29,31,29,31,31,29,29,29,29,31,29,31,29,31,29,31,29,31,29,0,0,0,0,0,35,33,34,35,33,34,35,33,34,35,33,34,35,35,33,34,35,33,34,35,35,33,34,35,35,35,35,35,33,33,33,33,34,35,33,34,35,33,34,35,33,34,35,33,0,0,0,0,36,37,36,37,36,36,37,36,37,37,36,36,37,36,36,37,36,37,37,36,37,37,37,36,37,36,37,36,37,36,37,36,37,0,0,0,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,0,0,0,0,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,0,0,47,47,0,47,47,47,47,47,47,47,0,0,0,0,0,57,58,0,0,0,0,0,0,50,0,0,50,50,50,50,50,50,50,50,50,0,0,0,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,0,0,0,56,56,56,56,56,56,56,56,56,56,56,56,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[1,[-1]]],[2,2,3]],[[-1,-2],4,[],[]],[[[1,[-1]],5,5,-1,-1],5,[2,3,6]],[[],[[1,[-1]]],[7,2,3]],[[[1,[-1]],8],9,[10,2,3]],[-1,-1,[]],[[[1,[-1]],5],[],[2,3]],[-1,-2,[],[]],[[[1,[-1]]],5,[2,3,6]],[[[11,[-1]]],[[1,[-1]]],[2,3,6]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[14,[-1]]],[[14,[-1]]],[2,3]],[[-1,-2],4,[],[]],[[],[[14,[-1]]],[7,3]],[[[14,[-1]],8],9,[10,3]],[-1,-1,[]],[[[14,[-1]]],[[15,[-1]]],3],[-1,-2,[],[]],[[[14,[-1]]],16,3],[[[14,[-1]]],5,3],[[[14,[-1]]],[[15,[-1]]],3],[[],[[14,[-1]]],3],[[[14,[-1]]],16,3],[[[14,[-1]],-1],4,3],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[17,[-1]]],[[17,[-1]]],2],[[-1,-2],4,[],[]],[[],[[17,[-1]]],7],[[[17,[-1]],[17,[-1]]],16,18],[[-1,-2],16,[],[]],[[[17,[-1]],8],9,10],[-1,-1,[]],[[[11,[-1]]],[[17,[-1]]],[2,7,19,20]],[-1,-2,[],[]],[[[17,[-1]]],16,[2,7,19,20]],[[[17,[-1]]],5,[2,7,19,20]],[[],[[17,[-1]]],[2,7,19,20]],[[[17,[-1]],-1],4,[2,7,19,20]],[[[17,[-1]],5],4,[2,7,19,20]],[[[17,[-1]],5,5],-1,[2,7,19,20]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[[[17,[-1]]],-1,[2,7,19,20]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[21,[-1]]],[[21,[-1]]],[2,22]],[[-1,-2],4,[],[]],[[],[[21,[-1]]],[7,22]],[[[21,[-1]],8],9,[10,22]],[-1,-1,[]],[23,[[21,[-1]]],22],[-1,-2,[],[]],[5,[[21,[-1]]],22],[[]],[[]],[[[21,[-1]],5,5],[],22],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[5],[[[21,[-1]],5,5],4,22],0,0,0,0,0,0,[[[24,[-1]]],25,26],[[[24,[-1]],[24,[-1]]],[],26],[[[24,[-1]],[24,[-1]]],4,26],[[[24,[-1]]],25,26],[[[24,[-1]],[24,[-1]]],25,26],[-1,-2,[],[]],[-1,-2,[],[]],[[[24,[-1]]],[[24,[-1]]],[2,26]],[[-1,-2],4,[],[]],[[[24,[-1]],[24,[-1]]],27,[28,26]],[[[24,[-1]],[24,[-1]]],-1,26],[[],[[24,[-1]]],[7,26]],[[[24,[-1]],[24,[-1]]],25,26],[[[24,[-1]],[24,[-1]]],-1,26],[[[24,[-1]],-1],[],26],[[[24,[-1]],-1],4,26],[[[24,[-1]],[24,[-1]]],-1,26],[[[24,[-1]],[24,[-1]]],16,[18,26]],[[-1,-2],16,[],[]],[[[24,[-1]],[24,[-1]]],[[24,[-1]]],26],[[[24,[-1]],8],9,[10,26]],[-1,-1,[]],[-1,-2,[],[]],[[[24,[-1]],-1],[],26],[[[24,[-1]],-1],4,26],[[[24,[-1]]],[],26],[[[24,[-1]],[24,[-1]],[24,[-1]]],-1,26],[[[24,[-1]],[24,[-1]]],[[15,[27]]],[3,26]],[[-1,-1],[[24,[-1]]],26],[[[24,[25]],25],[[24,[25]]]],[[[24,[-1]]],[[24,[-1]]],26],[[[24,[-1]],[24,[-1]]],[[24,[-1]]],26],[[[24,[25]],25,[24,[25]]],[[24,[25]]]],[[[24,[-1]],[24,[-1]],-1],[[24,[-1]]],26],[[[24,[25]],[24,[25]],25],[[24,[25]]]],[[[24,[-1]]],-1,26],[[[24,[-1]],[24,[-1]]],[],26],[[[24,[-1]],[24,[-1]]],4,26],[-1,25,[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],0,0,0,0,0,0,0,0,0,0,0,[[29,5,5],[[0,[30]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[31,31],[29,29],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[31,5,5],4],[[],31],[[29,5],5],0,[[31,8],9],[[29,8],9],[-1,-1,[]],[-1,-1,[]],[31,29],[-1,-2,[],[]],[-1,-2,[],[]],[[29,5,5],16],[29,16],[29,5],[5,31],[29,[[11,[32]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[33,33],[34,34],[35,35],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[35,5,5,32],34],[[33,8],9],[[34,8],9],[[35,8],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[35,34]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[35,5,5],32],[[35,5,5],[[4,[32,[11,[5]]]]]],0,[5,35],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[33,32],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[36,36],[37,37],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[37,5,5,32,38],4],0,[[],36],[[],37],0,[[36,8],9],[[37,8],9],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[5,37],0,[[37,5,5],[[4,[32,38]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[39,-1],39,10],[39,25],[-1,-1,[]],[39,40],[39,38],[-1,-2,[],[]],[39,39],[[],39],[[39,-1],41,6],[39,-1,42],[[39,5],[[11,[-1]]],42],[39,39],[39,43],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[39,[[12,[-1,44]]],42],[-1,13,[]],[39,45],[39,32],[[39,-1],39,6],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[46,46],[[-1,-2],4,[],[]],[[46,8],9],[-1,-1,[]],[-1,-2,[],[]],[[46,32,32],32],[32,46],[[46,32],32],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[32,47],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[47,15],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],0,0,0,0,0,[[-1,-1],-1,[]],[[-1,-1],-1,[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],0,0,0,0,[[[48,[-1]],[48,[-1]]],[[48,[-1]]],[49,7]],[[[48,[-1]],[48,[-1]]],4,19],[[[48,[-1]],[50,[-1]]],4,51],[[[48,[-1]],[50,[-1]]],4,52],[-1,-2,[],[]],[-1,-2,[],[]],[[[48,[-1]]],[[48,[-1]]],2],[[-1,-2],4,[],[]],[[],[[48,[-1]]],7],[[[48,[-1]]],[[0,[30]]],[]],[[[48,[-1]]],[[0,[30]]],[]],[[[48,[-1]],[48,[-1]]],16,18],[[-1,-2],16,[],[]],[5,[[48,[-1]]],[2,7,[53,[40]]]],[[[48,[-1]],8],9,10],[[[48,[-1]],8],9,6],[-1,-1,[]],[[5,[23,[-1]]],[[48,[-1]]],2],[[[48,[-1]]],[[11,[-1]]],52],[[[48,[-1]],5],[],[]],[[[48,[-1]],5],[],[]],[-1,-2,[],[]],[[[48,[-1]]],[[0,[30]]],[]],[[[48,[-1]]],4,52],[[[48,[-1]]],-1,52],0,[[[48,[-1]],[48,[-1]]],[[48,[-1]]],51],[[[48,[-1]],[48,[-1]]],4,51],[[[48,[-1]]],5,[]],[[[48,[-1]]],[],[54,7]],[5,[[48,[-1]]],[2,7]],[[[48,[-1]],32],[[48,[-1]]],51],[[[48,[-1]],[48,[-1]]],[[48,[-1]]],[20,7]],[[[48,[-1]],[48,[-1]]],4,55],[-1,-2,[],[]],[-1,43,[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[[],56],[[56,45],45],[[56,32],32],[45,56],[[56,[23,[-1]]],4,[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[45,[[11,[45]]]],0,0,0,0,0,[[[23,[-1]],[23,[-1]],[23,[5]]],[[15,[[4,[5,5]]]]],28],[[[23,[-1]]],[[4,[[11,[5]],[11,[5]]]]],28],[[[23,[-1]]],[[11,[5]]],28]],"c":[],"p":[[3,"MergeSortTree",16],[8,"Clone",439],[8,"PartialOrd",440],[15,"tuple"],[15,"usize"],[8,"Display",441],[8,"Default",442],[3,"Formatter",441],[6,"Result",441],[8,"Debug",441],[3,"Vec",443],[4,"Result",444],[3,"TypeId",445],[3,"QueueMin",35],[4,"Option",446],[15,"bool"],[3,"RangeSum",57],[8,"PartialEq",440],[8,"AddAssign",447],[8,"Sub",447],[3,"SegtreeLazy",83],[8,"LazyMonoid",83],[15,"slice"],[3,"Pnt",112],[15,"f64"],[8,"Coord",112],[4,"Ordering",440],[8,"Ord",440],[3,"DegreeOrderedGraph",165],[8,"Iterator",448],[3,"DogConstructor",165],[15,"u64"],[3,"Edge",203],[3,"EdgeIndex",203],[3,"Dinic",203],[3,"Edge",252],[3,"Mcmf",252],[15,"i64"],[3,"OJ",290],[15,"i32"],[15,"never"],[8,"FromStr",449],[3,"String",450],[15,"str"],[15,"u32"],[3,"Barrett",318],[3,"DivFloors",335],[3,"SquareMatrix",373],[8,"Add",447],[4,"ElementaryOp",359],[8,"Semiring",373],[8,"Field",359],[8,"From",451],[8,"Neg",447],[8,"SubAssign",447],[3,"Rng",417],[8,"Gcd",349],[8,"Lcm",349]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
